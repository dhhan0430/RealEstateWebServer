spring:
  h2:
    # 자동으로 H2 DB를 in-memory DB로 부팅시켜 준다.
    console:
      enabled: true
  jpa:
    # data.sql 실행
    defer-datasource-initialization: true
    # sql 쿼리 넣는 것을 보여준다.
    show-sql: true
    properties:
      hibernate:
        # sql 쿼리가 정렬되게 나오도록 한다.
        format_sql: true
    # mysql에서 사용.
    # 자동으로 entity에서 활용하고 있는 테이블들을 생성해준다.
    generate-ddl: true
    hibernate:
      # none: ddl auto를 실행 x
      # create: 항상 새로 생성하는 옵션 (persistence context를 띄울 때 앞쪽에서 drop을 한 후
      # create를 한다.)
      # create-drop: 생성되고, persistence context 가 종료될 때, 자동으로 drop 하는 기능.
      # (persistence context를 띄울 때 create만 하고, 종료할 때 drop을 해준다.)
      # update: 실제 스키마와 entity 클래스를 비교해서 변경에 대한 부분만 반영함 (drop 하지 않음)
      # validate: 단순 비교 작업만 하고, entity 설정과 스키마가 서로 다른 부분이 확인이 되면,
      # 오류를 발생시킨다.
      # h2 db 같은 embedded db를 사용하게 되면 hibernate.ddl-auto 가 기본적으로 create-drop
      # 으로 동작하게 된다. 그래서 따로 설정을 안해도 자동으로 create-drop으로 동작하게 된다.
      ddl-auto: create-drop
      # generate-ddl vs ddl-auto 차이
      # generate-ddl: jpa 하위 속성. jpa는 인터페이스에 대한 정의며, 실제 구현체는 별도로 존재.
      # 따라서, generate-ddl은 구현체와 상관 없이, 자동화된 ddl을 사용할 수 있도록 설정하는 값.
      # ddl-auto: hibernate(구현체)에서 제공하는 좀 더 세밀한 옵션이며, generate-ddl 과
      # ddl-auto 가 동시에 사용되면, generate-ddl은 무시된다.
      # generate-ddl 은 jpa 구현체와 상관없이 사용할 수 있는 범용적인 옵션.
      # ddl-auto 는 hibernate 에서 제공하는 좀 더 세밀한 옵션.
  # mysql에서 사용.
  datasource:
    # jdbc api를 사용할 것이고, mysql db driver를 쓸 것이고, 주소는 localhost.
    # port는 3306, book_manager 데이터베이스로 접속.
    url: jdbc:mysql://localhost:3306/book_manager
    username: root
    password: abcd
    # 스프링에서 지정하는 initialization mode 가 동작한다. (schema.sql or data.sql 실행)
    # schema.sql: schema 생성해주는 것, data.sql: data 넣어주는 것.
    # h2 db에서는 설정 안해줘도 자동으로 실행해줬지만, mysql 같은 db에서는 설정해줘야 한다.
    # ddl-auto: create-drop 과 initialization-mode: always(schema.sql) 은 서로
    # 충돌되는 작업인데, initialization-mode: always가 우선시되어 동작한다.
    initialization-mode: always